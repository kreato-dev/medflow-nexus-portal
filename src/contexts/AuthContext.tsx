
import { createContext, useContext, useEffect, useState } from 'react';

// User types
export type UserRole = 'admin' | 'doctor' | 'patient';

export interface User {
  id: string;
  name: string;
  email: string;
  role: UserRole;
  avatar?: string;
}

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
  register: (userData: any) => Promise<void>;
  resetPassword: (email: string) => Promise<void>;
}

// Create context with a default value
const AuthContext = createContext<AuthContextType>({
  user: null,
  isAuthenticated: false,
  isLoading: true,
  login: async () => {},
  logout: () => {},
  register: async () => {},
  resetPassword: async () => {},
});

// Mock data for simulating authentication
const MOCK_USERS = [
  {
    id: '1',
    name: 'Admin User',
    email: 'admin@example.com',
    password: 'password123', // In a real app, this would be hashed
    role: 'admin' as UserRole,
    avatar: 'https://ui-avatars.com/api/?name=Admin+User&background=0D8ABC&color=fff',
  },
  {
    id: '2',
    name: 'Dr. Jane Smith',
    email: 'doctor@example.com',
    password: 'password123',
    role: 'doctor' as UserRole,
    avatar: 'https://ui-avatars.com/api/?name=Jane+Smith&background=0D8ABC&color=fff',
  },
  {
    id: '3',
    name: 'John Doe',
    email: 'patient@example.com',
    password: 'password123',
    role: 'patient' as UserRole,
    avatar: 'https://ui-avatars.com/api/?name=John+Doe&background=0D8ABC&color=fff',
  },
];

// Provider component
export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // Check for stored auth token on mount
  useEffect(() => {
    const checkAuth = async () => {
      try {
        const storedUser = localStorage.getItem('medflow_user');
        const storedToken = localStorage.getItem('medflow_token');
        
        if (storedUser && storedToken) {
          // In a real app, validate the token with the server
          setUser(JSON.parse(storedUser));
        }
      } catch (error) {
        console.error('Authentication error:', error);
        localStorage.removeItem('medflow_user');
        localStorage.removeItem('medflow_token');
      } finally {
        setIsLoading(false);
      }
    };

    checkAuth();
  }, []);

  const login = async (email: string, password: string) => {
    setIsLoading(true);
    try {
      // Simulate API request delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Find user (in a real app, this would be an API call)
      const mockUser = MOCK_USERS.find(
        u => u.email === email && u.password === password
      );
      
      if (!mockUser) {
        throw new Error('Invalid credentials');
      }
      
      // Remove password from user object
      const { password: _, ...userWithoutPassword } = mockUser;
      
      // Store user in state
      setUser(userWithoutPassword);
      
      // Store in localStorage (in a real app, store a JWT token instead)
      localStorage.setItem('medflow_user', JSON.stringify(userWithoutPassword));
      localStorage.setItem('medflow_token', 'mock-jwt-token');
      
    } catch (error) {
      console.error('Login error:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem('medflow_user');
    localStorage.removeItem('medflow_token');
  };

  const register = async (userData: any) => {
    setIsLoading(true);
    try {
      // Simulate API request delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // In a real app, this would be an API call to register the user
      console.log('Registering user:', userData);
      
      // Auto-login after registration
      const mockUser = {
        id: '4', // In a real app, this would be generated by the server
        name: userData.name,
        email: userData.email,
        role: userData.role as UserRole,
        avatar: `https://ui-avatars.com/api/?name=${encodeURIComponent(userData.name)}&background=0D8ABC&color=fff`,
      };
      
      setUser(mockUser);
      localStorage.setItem('medflow_user', JSON.stringify(mockUser));
      localStorage.setItem('medflow_token', 'mock-jwt-token');
      
    } catch (error) {
      console.error('Registration error:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const resetPassword = async (email: string) => {
    setIsLoading(true);
    try {
      // Simulate API request delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // In a real app, this would be an API call to initiate password reset
      const userExists = MOCK_USERS.some(u => u.email === email);
      
      if (!userExists) {
        throw new Error('User not found');
      }
      
      console.log(`Password reset initiated for: ${email}`);
      // In a real app, this would send an email with a reset link
      
    } catch (error) {
      console.error('Password reset error:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const value = {
    user,
    isAuthenticated: !!user,
    isLoading,
    login,
    logout,
    register,
    resetPassword,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

// Custom hook to use the auth context
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
